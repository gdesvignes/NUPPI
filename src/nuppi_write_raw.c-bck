/* test_net_thread.c
 *
 * Test run net thread.
 */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <signal.h>
#include <poll.h>
#include <getopt.h>
#include <errno.h>

#include "fitshead.h"
#include "logging.h"
#include "status.h"
#include "databuf.h"
#include "params.h"

#define STATUS "NUPPSTAT"
#include "threads.h"

#include "thread_main.h"

void usage() {
    fprintf(stderr,
            "Usage: BON_write_raw [options]\n"
            "Options:\n"
            "  -h, --help        This message\n"
            "  -d, --disk        Write raw data to disk (default no)\n"
            "  -o, --only_net    Run only guppi_net_thread\n"
            "  -g, --one_gpu     Run only for one GPU\n"
           );
}

/* Thread declarations */
void *net_thread(void *_up);
void *rawdisk_thread(void *args);
void *null_thread(void *args);

int main(int argc, char *argv[]) {

    static struct option long_opts[] = {
        {"help",    0, NULL, 'h'},
        {"disk",    0, NULL, 'd'},
        {"only_net",0, NULL, 'o'},
        {"one_gpu", 0, NULL, 'g'},
        {0,0,0,0}
    };
    int opt, opti;
    int disk=0, only_net=0, one_gpu=0;
    while ((opt=getopt_long(argc,argv,"hdog",long_opts,&opti))!=-1) {
        switch (opt) {
            case 'd':
                disk=1;
                break;
            case 'o':
                only_net=1;
                break;
            case 'g':
                one_gpu=1;
                break;
            default:
            case 'h':
                usage();
                exit(0);
                break;
        }
    }

    // -- thread args --
    thread_args net_args;
    thread_args_init(&net_args);
    net_args.output_buffer = 1;
    net_args.gpu_id = 1; net_args.priority = 15;

    /* Init shared mem */
    status stat;
    databuf *dbuf=NULL;
    int rv = status_attach(&stat, 1);
    if (rv!=OK) {
        log_error("nuppi_write_raw", "Error connecting to status shm");
        exit(1);
    }
   
    // -- Read status shm, init RUN and read filename --
    char basename[256];
    status_lock_safe(&stat);
    hgets(stat.buf, "BASENAME", 256, basename);
    hputi4(stat.buf, "RUN", 1);
    status_unlock_safe(&stat);


    dbuf = databuf_attach(net_args.output_buffer);
    /* If attach fails, first try to create the databuf */
    if (dbuf==NULL) 
        dbuf = databuf_create(8, 128*1024*1024, net_args.output_buffer);
    /* If that also fails, exit */
    if (dbuf==NULL) {
        log_error("nuppi_write_raw", "Error connecting to databuf net shm");
        exit(1);
    }
    databuf_clear(dbuf);

    run=1;
    signal(SIGINT, cc);

    /* Launch net thread */
    pthread_t net_thread_id;
    rv = pthread_create(&net_thread_id, NULL, net_thread, (void *)&net_args);
    if (rv) { 
        log_error("nuppi_write_raw", "Error creating net thread");
        perror("pthread_create");
        exit(1);
    }

    /* Launch raw disk (or null) thread */
    thread_args null_args;
    thread_args_init(&null_args);
    null_args.input_buffer = net_args.output_buffer;
    null_args.output_buffer = 1;
    null_args.gpu_id = 1; null_args.priority = 20;

    pthread_t disk_thread_id=0;
    if (only_net==0) {
        if (disk) rv = pthread_create(&disk_thread_id, NULL, rawdisk_thread, (void *)&null_args);
        else
            rv = pthread_create(&disk_thread_id, NULL, null_thread, (void *)&null_args);
        if (rv) { 
            log_error("nuppi_write_raw", "Error creating rawdisk/null thread");
            exit(1);
        }
    }

    if(one_gpu) {

	dbuf = databuf_attach(net_args.output_buffer);
	/* If attach fails, first try to create the databuf */
	if (dbuf==NULL) dbuf = databuf_create(8, 128*1024*1024, net_args.output_buffer);
	/* If that also fails, exit */
	if (dbuf==NULL) {
	    log_error("nuppi_write_raw", "Error connecting to databuf net shm");
	    exit(1);
	}
	databuf_clear(dbuf);

        /* Launch net thread */
	pthread_t net_thread_id;
	rv = pthread_create(&net_thread_id, NULL, net_thread, (void *)&net_args);
	if (rv) {
	    log_error("nuppi_write_raw", "Error creating net thread");
	    perror("pthread_create");
	    exit(1);
	}

	/* Launch raw disk (or null) thread */
	thread_args null_args;
	thread_args_init(&null_args);
	null_args.input_buffer = net_args.output_buffer;
	null_args.output_buffer = 1;
	null_args.gpu_id = 1; null_args.priority = 20;

	pthread_t disk_thread_id=0;
	if (only_net==0) {
	    if (disk) rv = pthread_create(&disk_thread_id, NULL, rawdisk_thread, (void *)&null_args);
	    else
		rv = pthread_create(&disk_thread_id, NULL, null_thread, (void *)&null_args);
	    if (rv) {
		log_error("nuppi_write_raw", "Error creating rawdisk/null thread");
		exit(1);
	    }
	}
    }


    /* Wait for end */
    while (run) { 
        sleep(1);
	// Read the RUN keyword in the first status shm, to look for a stop order
	status_lock_safe(&stat);
	hgeti4(stat.buf, "RUN", &run);
	status_unlock_safe(&stat);
	
	if (run == 0) log_info("nuppi_write_raw", "Caught RUN = 0 signal for end of observation");

	if (null_args.finished) run=0;
    }


    if (disk_thread_id) 
        pthread_cancel(disk_thread_id);
    pthread_cancel(net_thread_id);

    if (disk_thread_id) 
        pthread_kill(disk_thread_id,SIGINT);

    pthread_kill(net_thread_id,SIGINT);
    pthread_join(net_thread_id,NULL);
    log_info("nuppi_write_raw", "Joined net thread");

    if (disk_thread_id) {
        pthread_join(disk_thread_id,NULL);
        log_info("nuppi_write_raw", "Joined disk thread");
    }

    thread_args_destroy(&null_args);

    exit(0);
}
